const ethers = require("ethers");
require("dotenv").config({ path: '.env.local' });

const contractABI = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "id",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "userId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "bytes32[6]",
				"name": "predictionText",
				"type": "bytes32[6]"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "PredictionMade",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_userId",
				"type": "uint256"
			},
			{
				"internalType": "bytes32[6]",
				"name": "_predictionText",
				"type": "bytes32[6]"
			}
		],
		"name": "emitPrediction",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getNextId",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_id",
				"type": "uint256"
			}
		],
		"name": "getPredictionById",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "userId",
				"type": "uint256"
			},
			{
				"internalType": "bytes32[6]",
				"name": "predictionText",
				"type": "bytes32[6]"
			},
			{
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]

const contractBytecode = "60806040525f6001553480156012575f80fd5b50610584806100205f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80635cf9134114610043578063bc9683261461005f578063eaa1c8ca1461007d575b5f80fd5b61005d60048036038101906100589190610316565b6100af565b005b610067610198565b6040516100749190610363565b60405180910390f35b6100976004803603810190610092919061037c565b6101a1565b6040516100a693929190610455565b60405180910390f35b60405180606001604052808381526020018260068060200260405190810160405280929190826006602002808284375f81840152601f19601f8201169050808301925050505050508152602001428152505f8060015481526020019081526020015f205f820151815f015560208201518160010190600661013192919061023d565b50604082015181600701559050506001547f61d6de327df65f7aa4e4199b37b3662813173da9cd301f28991f49bebf206ab6838342604051610175939291906104a4565b60405180910390a260015f81548092919061018f90610507565b91905055505050565b5f600154905090565b5f6101aa61027d565b5f805f808681526020019081526020015f206040518060600160405290815f82015481526020016001820160068060200260405190810160405280929190826006801561020c576020028201915b8154815260200190600101908083116101f8575b505050505081526020016007820154815250509050805f015181602001518260400151935093509350509193909250565b826006810192821561026c579160200282015b8281111561026b578251825591602001919060010190610250565b5b509050610279919061029f565b5090565b6040518060c00160405280600690602082028036833780820191505090505090565b5b808211156102b6575f815f9055506001016102a0565b5090565b5f80fd5b5f819050919050565b6102d0816102be565b81146102da575f80fd5b50565b5f813590506102eb816102c7565b92915050565b5f80fd5b5f819050826020600602820111156103105761030f6102f1565b5b92915050565b5f8060e0838503121561032c5761032b6102ba565b5b5f610339858286016102dd565b925050602061034a858286016102f5565b9150509250929050565b61035d816102be565b82525050565b5f6020820190506103765f830184610354565b92915050565b5f60208284031215610391576103906102ba565b5b5f61039e848285016102dd565b91505092915050565b5f60069050919050565b5f81905092915050565b5f819050919050565b5f819050919050565b6103d6816103c4565b82525050565b5f6103e783836103cd565b60208301905092915050565b5f602082019050919050565b610408816103a7565b61041281846103b1565b925061041d826103bb565b805f5b8381101561044d57815161043487826103dc565b965061043f836103f3565b925050600181019050610420565b505050505050565b5f610100820190506104695f830186610354565b61047660208301856103ff565b61048360e0830184610354565b949350505050565b82818337505050565b6104a060c0838361048b565b5050565b5f610100820190506104b85f830186610354565b6104c56020830185610494565b6104d260e0830184610354565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610511826102be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610543576105426104da565b5b60018201905091905056fea26469706673582212204af8e3356623ee54372699fe6551411dff45be6ec7064a405aff5cad12fccbb764736f6c634300081a0033";

async function main() {
  const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);
  
  const signer = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const factory = new ethers.ContractFactory(contractABI, contractBytecode, signer);

  console.log("Deploying contract...");
  
  const contract = await factory.deploy();
  
  await contract.waitForDeployment();

  console.log("Contract deployed to:", await contract.getAddress());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });